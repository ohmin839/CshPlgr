//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CollectionGrammar.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CshPlgr.Lib.Collector.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class CollectionGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LARGE_ALPHA=1, LARGE_EPSILON=2, LARGE_ETA=3, LARGE_IOTA=4, LARGE_OMICRON=5, 
		LARGE_UPSILON=6, LARGE_OMEGA=7, LARGE_RHO=8, LARGE_CONSONANT=9, SMALL_ALPHA=10, 
		SMALL_EPSILON=11, SMALL_ETA=12, SMALL_IOTA=13, SMALL_OMICRON=14, SMALL_UPSILON=15, 
		SMALL_OMEGA=16, SMALL_RHO=17, SMALL_CONSONANT=18, APOSTROPH=19, ANYCHAR=20;
	public const int
		RULE_text = 0, RULE_chank = 1, RULE_word = 2, RULE_alphabet = 3, RULE_otherwise = 4;
	public static readonly string[] ruleNames = {
		"text", "chank", "word", "alphabet", "otherwise"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LARGE_ALPHA", "LARGE_EPSILON", "LARGE_ETA", "LARGE_IOTA", "LARGE_OMICRON", 
		"LARGE_UPSILON", "LARGE_OMEGA", "LARGE_RHO", "LARGE_CONSONANT", "SMALL_ALPHA", 
		"SMALL_EPSILON", "SMALL_ETA", "SMALL_IOTA", "SMALL_OMICRON", "SMALL_UPSILON", 
		"SMALL_OMEGA", "SMALL_RHO", "SMALL_CONSONANT", "APOSTROPH", "ANYCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CollectionGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CollectionGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CollectionGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CollectionGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChankContext[] chank() {
			return GetRuleContexts<ChankContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChankContext chank(int i) {
			return GetRuleContext<ChankContext>(i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 0, RULE_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LARGE_ALPHA) | (1L << LARGE_EPSILON) | (1L << LARGE_ETA) | (1L << LARGE_IOTA) | (1L << LARGE_OMICRON) | (1L << LARGE_UPSILON) | (1L << LARGE_OMEGA) | (1L << LARGE_RHO) | (1L << LARGE_CONSONANT) | (1L << SMALL_ALPHA) | (1L << SMALL_EPSILON) | (1L << SMALL_ETA) | (1L << SMALL_IOTA) | (1L << SMALL_OMICRON) | (1L << SMALL_UPSILON) | (1L << SMALL_OMEGA) | (1L << SMALL_RHO) | (1L << SMALL_CONSONANT) | (1L << ANYCHAR))) != 0)) {
				{
				{
				State = 10;
				chank();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChankContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WordContext word() {
			return GetRuleContext<WordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherwiseContext otherwise() {
			return GetRuleContext<OtherwiseContext>(0);
		}
		public ChankContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chank; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterChank(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitChank(this);
		}
	}

	[RuleVersion(0)]
	public ChankContext chank() {
		ChankContext _localctx = new ChankContext(Context, State);
		EnterRule(_localctx, 2, RULE_chank);
		try {
			State = 18;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LARGE_ALPHA:
			case LARGE_EPSILON:
			case LARGE_ETA:
			case LARGE_IOTA:
			case LARGE_OMICRON:
			case LARGE_UPSILON:
			case LARGE_OMEGA:
			case LARGE_RHO:
			case LARGE_CONSONANT:
			case SMALL_ALPHA:
			case SMALL_EPSILON:
			case SMALL_ETA:
			case SMALL_IOTA:
			case SMALL_OMICRON:
			case SMALL_UPSILON:
			case SMALL_OMEGA:
			case SMALL_RHO:
			case SMALL_CONSONANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 16;
				word();
				}
				break;
			case ANYCHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 17;
				otherwise();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlphabetContext[] alphabet() {
			return GetRuleContexts<AlphabetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlphabetContext alphabet(int i) {
			return GetRuleContext<AlphabetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APOSTROPH() { return GetToken(CollectionGrammarParser.APOSTROPH, 0); }
		public WordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_word; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitWord(this);
		}
	}

	[RuleVersion(0)]
	public WordContext word() {
		WordContext _localctx = new WordContext(Context, State);
		EnterRule(_localctx, 4, RULE_word);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 20;
					alphabet();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 23;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==APOSTROPH) {
				{
				State = 25;
				Match(APOSTROPH);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlphabetContext : ParserRuleContext {
		public AlphabetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alphabet; } }
	 
		public AlphabetContext() { }
		public virtual void CopyFrom(AlphabetContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LargeRhoContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_RHO() { return GetToken(CollectionGrammarParser.LARGE_RHO, 0); }
		public LargeRhoContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterLargeRho(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitLargeRho(this);
		}
	}
	public partial class SmallIotaContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_IOTA() { return GetToken(CollectionGrammarParser.SMALL_IOTA, 0); }
		public SmallIotaContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterSmallIota(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitSmallIota(this);
		}
	}
	public partial class LargeIotaContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_IOTA() { return GetToken(CollectionGrammarParser.LARGE_IOTA, 0); }
		public LargeIotaContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterLargeIota(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitLargeIota(this);
		}
	}
	public partial class SmallUpsilonContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_UPSILON() { return GetToken(CollectionGrammarParser.SMALL_UPSILON, 0); }
		public SmallUpsilonContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterSmallUpsilon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitSmallUpsilon(this);
		}
	}
	public partial class SmallConsonantContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_CONSONANT() { return GetToken(CollectionGrammarParser.SMALL_CONSONANT, 0); }
		public SmallConsonantContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterSmallConsonant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitSmallConsonant(this);
		}
	}
	public partial class LargeEtaContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_ETA() { return GetToken(CollectionGrammarParser.LARGE_ETA, 0); }
		public LargeEtaContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterLargeEta(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitLargeEta(this);
		}
	}
	public partial class LargeConsonantContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_CONSONANT() { return GetToken(CollectionGrammarParser.LARGE_CONSONANT, 0); }
		public LargeConsonantContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterLargeConsonant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitLargeConsonant(this);
		}
	}
	public partial class SmallRhoContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_RHO() { return GetToken(CollectionGrammarParser.SMALL_RHO, 0); }
		public SmallRhoContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterSmallRho(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitSmallRho(this);
		}
	}
	public partial class LargeOmicronContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_OMICRON() { return GetToken(CollectionGrammarParser.LARGE_OMICRON, 0); }
		public LargeOmicronContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterLargeOmicron(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitLargeOmicron(this);
		}
	}
	public partial class LargeEpsilonContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_EPSILON() { return GetToken(CollectionGrammarParser.LARGE_EPSILON, 0); }
		public LargeEpsilonContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterLargeEpsilon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitLargeEpsilon(this);
		}
	}
	public partial class LargeOmegaContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_OMEGA() { return GetToken(CollectionGrammarParser.LARGE_OMEGA, 0); }
		public LargeOmegaContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterLargeOmega(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitLargeOmega(this);
		}
	}
	public partial class SmallAlphaContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_ALPHA() { return GetToken(CollectionGrammarParser.SMALL_ALPHA, 0); }
		public SmallAlphaContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterSmallAlpha(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitSmallAlpha(this);
		}
	}
	public partial class SmallOmegaContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_OMEGA() { return GetToken(CollectionGrammarParser.SMALL_OMEGA, 0); }
		public SmallOmegaContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterSmallOmega(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitSmallOmega(this);
		}
	}
	public partial class LargeAlphaContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_ALPHA() { return GetToken(CollectionGrammarParser.LARGE_ALPHA, 0); }
		public LargeAlphaContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterLargeAlpha(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitLargeAlpha(this);
		}
	}
	public partial class SmallEpsilonContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_EPSILON() { return GetToken(CollectionGrammarParser.SMALL_EPSILON, 0); }
		public SmallEpsilonContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterSmallEpsilon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitSmallEpsilon(this);
		}
	}
	public partial class SmallEtaContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_ETA() { return GetToken(CollectionGrammarParser.SMALL_ETA, 0); }
		public SmallEtaContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterSmallEta(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitSmallEta(this);
		}
	}
	public partial class SmallOmicronContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_OMICRON() { return GetToken(CollectionGrammarParser.SMALL_OMICRON, 0); }
		public SmallOmicronContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterSmallOmicron(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitSmallOmicron(this);
		}
	}
	public partial class LargeUpsilonContext : AlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_UPSILON() { return GetToken(CollectionGrammarParser.LARGE_UPSILON, 0); }
		public LargeUpsilonContext(AlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterLargeUpsilon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitLargeUpsilon(this);
		}
	}

	[RuleVersion(0)]
	public AlphabetContext alphabet() {
		AlphabetContext _localctx = new AlphabetContext(Context, State);
		EnterRule(_localctx, 6, RULE_alphabet);
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LARGE_ALPHA:
				_localctx = new LargeAlphaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 28;
				Match(LARGE_ALPHA);
				}
				break;
			case LARGE_EPSILON:
				_localctx = new LargeEpsilonContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 29;
				Match(LARGE_EPSILON);
				}
				break;
			case LARGE_ETA:
				_localctx = new LargeEtaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 30;
				Match(LARGE_ETA);
				}
				break;
			case LARGE_IOTA:
				_localctx = new LargeIotaContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 31;
				Match(LARGE_IOTA);
				}
				break;
			case LARGE_OMICRON:
				_localctx = new LargeOmicronContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 32;
				Match(LARGE_OMICRON);
				}
				break;
			case LARGE_UPSILON:
				_localctx = new LargeUpsilonContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 33;
				Match(LARGE_UPSILON);
				}
				break;
			case LARGE_OMEGA:
				_localctx = new LargeOmegaContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 34;
				Match(LARGE_OMEGA);
				}
				break;
			case LARGE_RHO:
				_localctx = new LargeRhoContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 35;
				Match(LARGE_RHO);
				}
				break;
			case LARGE_CONSONANT:
				_localctx = new LargeConsonantContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 36;
				Match(LARGE_CONSONANT);
				}
				break;
			case SMALL_ALPHA:
				_localctx = new SmallAlphaContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 37;
				Match(SMALL_ALPHA);
				}
				break;
			case SMALL_EPSILON:
				_localctx = new SmallEpsilonContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 38;
				Match(SMALL_EPSILON);
				}
				break;
			case SMALL_ETA:
				_localctx = new SmallEtaContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 39;
				Match(SMALL_ETA);
				}
				break;
			case SMALL_IOTA:
				_localctx = new SmallIotaContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 40;
				Match(SMALL_IOTA);
				}
				break;
			case SMALL_OMICRON:
				_localctx = new SmallOmicronContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 41;
				Match(SMALL_OMICRON);
				}
				break;
			case SMALL_UPSILON:
				_localctx = new SmallUpsilonContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 42;
				Match(SMALL_UPSILON);
				}
				break;
			case SMALL_OMEGA:
				_localctx = new SmallOmegaContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 43;
				Match(SMALL_OMEGA);
				}
				break;
			case SMALL_RHO:
				_localctx = new SmallRhoContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 44;
				Match(SMALL_RHO);
				}
				break;
			case SMALL_CONSONANT:
				_localctx = new SmallConsonantContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 45;
				Match(SMALL_CONSONANT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherwiseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANYCHAR() { return GetToken(CollectionGrammarParser.ANYCHAR, 0); }
		public OtherwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherwise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.EnterOtherwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICollectionGrammarListener typedListener = listener as ICollectionGrammarListener;
			if (typedListener != null) typedListener.ExitOtherwise(this);
		}
	}

	[RuleVersion(0)]
	public OtherwiseContext otherwise() {
		OtherwiseContext _localctx = new OtherwiseContext(Context, State);
		EnterRule(_localctx, 8, RULE_otherwise);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(ANYCHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x16', '\x35', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\a', '\x2', '\xE', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x11', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x15', '\n', '\x3', '\x3', '\x4', '\x6', '\x4', '\x18', 
		'\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x19', '\x3', '\x4', '\x5', '\x4', 
		'\x1D', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x31', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x2', '\x2', '\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', '\x2', '\x2', 
		'\x44', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x4', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x17', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\n', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\xE', '\x5', '\x4', '\x3', '\x2', '\r', '\f', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x11', '\x3', '\x2', '\x2', '\x2', '\xF', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\xF', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x3', '\x3', '\x2', '\x2', '\x2', '\x11', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x15', '\x5', '\x6', '\x4', '\x2', '\x13', '\x15', 
		'\x5', '\n', '\x6', '\x2', '\x14', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x13', '\x3', '\x2', '\x2', '\x2', '\x15', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x18', '\x5', '\b', '\x5', '\x2', '\x17', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1D', 
		'\a', '\x15', '\x2', '\x2', '\x1C', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1D', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x31', '\a', '\x3', '\x2', '\x2', '\x1F', '\x31', 
		'\a', '\x4', '\x2', '\x2', ' ', '\x31', '\a', '\x5', '\x2', '\x2', '!', 
		'\x31', '\a', '\x6', '\x2', '\x2', '\"', '\x31', '\a', '\a', '\x2', '\x2', 
		'#', '\x31', '\a', '\b', '\x2', '\x2', '$', '\x31', '\a', '\t', '\x2', 
		'\x2', '%', '\x31', '\a', '\n', '\x2', '\x2', '&', '\x31', '\a', '\v', 
		'\x2', '\x2', '\'', '\x31', '\a', '\f', '\x2', '\x2', '(', '\x31', '\a', 
		'\r', '\x2', '\x2', ')', '\x31', '\a', '\xE', '\x2', '\x2', '*', '\x31', 
		'\a', '\xF', '\x2', '\x2', '+', '\x31', '\a', '\x10', '\x2', '\x2', ',', 
		'\x31', '\a', '\x11', '\x2', '\x2', '-', '\x31', '\a', '\x12', '\x2', 
		'\x2', '.', '\x31', '\a', '\x13', '\x2', '\x2', '/', '\x31', '\a', '\x14', 
		'\x2', '\x2', '\x30', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x30', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x30', ' ', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x30', '\"', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '#', '\x3', '\x2', '\x2', '\x2', '\x30', '$', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '%', '\x3', '\x2', '\x2', '\x2', '\x30', '&', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\'', '\x3', '\x2', '\x2', '\x2', '\x30', '(', '\x3', 
		'\x2', '\x2', '\x2', '\x30', ')', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'*', '\x3', '\x2', '\x2', '\x2', '\x30', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x30', ',', '\x3', '\x2', '\x2', '\x2', '\x30', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\t', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\a', '\x16', '\x2', '\x2', '\x33', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\a', '\xF', '\x14', '\x19', '\x1C', '\x30',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace CshPlgr.Lib.Collector.Generated
