//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ConversionGrammar.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CshPlgr.Lib.Converter.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class ConversionGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LARGE_ALPHA=1, LARGE_EPSILON=2, LARGE_ETA=3, LARGE_IOTA=4, LARGE_OMICRON=5, 
		LARGE_UPSILON=6, LARGE_OMEGA=7, LARGE_BETA=8, LARGE_GAMMA=9, LARGE_DELTA=10, 
		LARGE_ZETA=11, LARGE_KAPPA=12, LARGE_LAMBDA=13, LARGE_MU=14, LARGE_NU=15, 
		LARGE_XI=16, LARGE_PI=17, LARGE_RHO=18, LARGE_SIGMA=19, LARGE_TAU=20, 
		SMALL_ALPHA=21, SMALL_EPSILON=22, SMALL_ETA=23, SMALL_IOTA=24, SMALL_OMICRON=25, 
		SMALL_UPSILON=26, SMALL_OMEGA=27, SMALL_BETA=28, SMALL_GAMMA=29, SMALL_DELTA=30, 
		SMALL_ZETA=31, SMALL_KAPPA=32, SMALL_LAMBDA=33, SMALL_MU=34, SMALL_NU=35, 
		SMALL_XI=36, SMALL_PI=37, SMALL_RHO=38, SMALL_SIGMA=39, SMALL_TAU=40, 
		COMMA=41, SEMICORON=42, PERIOD=43, QUESTION=44, APOSTROPH=45, LGUILLEMET=46, 
		RGUILLEMET=47, EMDASH=48, SPACE=49, NEWLINE=50, ANYCHAR=51;
	public const int
		RULE_letters = 0, RULE_letter = 1, RULE_alphabet = 2, RULE_largeNasableGamma = 3, 
		RULE_smallNasableGamma = 4, RULE_nonFinalSigma = 5, RULE_singleAlphabet = 6, 
		RULE_punctuation = 7, RULE_whitespace = 8, RULE_otherwise = 9;
	public static readonly string[] ruleNames = {
		"letters", "letter", "alphabet", "largeNasableGamma", "smallNasableGamma", 
		"nonFinalSigma", "singleAlphabet", "punctuation", "whitespace", "otherwise"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'B'", "'G'", "'D'", "'Z'", 
		null, "'L'", "'M'", "'N'", "'X'", null, null, "'S'", null, null, null, 
		null, null, null, null, null, "'b'", "'g'", "'d'", "'z'", null, "'l'", 
		"'m'", "'n'", "'x'", null, null, null, null, "','", "';'", "'.'", "'?'", 
		"''''", "'<<'", "'>>'", "'--'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LARGE_ALPHA", "LARGE_EPSILON", "LARGE_ETA", "LARGE_IOTA", "LARGE_OMICRON", 
		"LARGE_UPSILON", "LARGE_OMEGA", "LARGE_BETA", "LARGE_GAMMA", "LARGE_DELTA", 
		"LARGE_ZETA", "LARGE_KAPPA", "LARGE_LAMBDA", "LARGE_MU", "LARGE_NU", "LARGE_XI", 
		"LARGE_PI", "LARGE_RHO", "LARGE_SIGMA", "LARGE_TAU", "SMALL_ALPHA", "SMALL_EPSILON", 
		"SMALL_ETA", "SMALL_IOTA", "SMALL_OMICRON", "SMALL_UPSILON", "SMALL_OMEGA", 
		"SMALL_BETA", "SMALL_GAMMA", "SMALL_DELTA", "SMALL_ZETA", "SMALL_KAPPA", 
		"SMALL_LAMBDA", "SMALL_MU", "SMALL_NU", "SMALL_XI", "SMALL_PI", "SMALL_RHO", 
		"SMALL_SIGMA", "SMALL_TAU", "COMMA", "SEMICORON", "PERIOD", "QUESTION", 
		"APOSTROPH", "LGUILLEMET", "RGUILLEMET", "EMDASH", "SPACE", "NEWLINE", 
		"ANYCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ConversionGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ConversionGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ConversionGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ConversionGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LettersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LetterContext[] letter() {
			return GetRuleContexts<LetterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetterContext letter(int i) {
			return GetRuleContext<LetterContext>(i);
		}
		public LettersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LettersContext letters() {
		LettersContext _localctx = new LettersContext(Context, State);
		EnterRule(_localctx, 0, RULE_letters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LARGE_ALPHA) | (1L << LARGE_EPSILON) | (1L << LARGE_ETA) | (1L << LARGE_IOTA) | (1L << LARGE_OMICRON) | (1L << LARGE_UPSILON) | (1L << LARGE_OMEGA) | (1L << LARGE_BETA) | (1L << LARGE_GAMMA) | (1L << LARGE_DELTA) | (1L << LARGE_ZETA) | (1L << LARGE_KAPPA) | (1L << LARGE_LAMBDA) | (1L << LARGE_MU) | (1L << LARGE_NU) | (1L << LARGE_XI) | (1L << LARGE_PI) | (1L << LARGE_RHO) | (1L << LARGE_SIGMA) | (1L << LARGE_TAU) | (1L << SMALL_ALPHA) | (1L << SMALL_EPSILON) | (1L << SMALL_ETA) | (1L << SMALL_IOTA) | (1L << SMALL_OMICRON) | (1L << SMALL_UPSILON) | (1L << SMALL_OMEGA) | (1L << SMALL_BETA) | (1L << SMALL_GAMMA) | (1L << SMALL_DELTA) | (1L << SMALL_ZETA) | (1L << SMALL_KAPPA) | (1L << SMALL_LAMBDA) | (1L << SMALL_MU) | (1L << SMALL_NU) | (1L << SMALL_XI) | (1L << SMALL_PI) | (1L << SMALL_RHO) | (1L << SMALL_SIGMA) | (1L << SMALL_TAU) | (1L << COMMA) | (1L << SEMICORON) | (1L << PERIOD) | (1L << QUESTION) | (1L << APOSTROPH) | (1L << LGUILLEMET) | (1L << RGUILLEMET) | (1L << EMDASH) | (1L << SPACE) | (1L << NEWLINE) | (1L << ANYCHAR))) != 0)) {
				{
				{
				State = 20;
				letter();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlphabetContext alphabet() {
			return GetRuleContext<AlphabetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PunctuationContext punctuation() {
			return GetRuleContext<PunctuationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhitespaceContext whitespace() {
			return GetRuleContext<WhitespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherwiseContext otherwise() {
			return GetRuleContext<OtherwiseContext>(0);
		}
		public LetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterContext letter() {
		LetterContext _localctx = new LetterContext(Context, State);
		EnterRule(_localctx, 2, RULE_letter);
		try {
			State = 30;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LARGE_ALPHA:
			case LARGE_EPSILON:
			case LARGE_ETA:
			case LARGE_IOTA:
			case LARGE_OMICRON:
			case LARGE_UPSILON:
			case LARGE_OMEGA:
			case LARGE_BETA:
			case LARGE_GAMMA:
			case LARGE_DELTA:
			case LARGE_ZETA:
			case LARGE_KAPPA:
			case LARGE_LAMBDA:
			case LARGE_MU:
			case LARGE_NU:
			case LARGE_XI:
			case LARGE_PI:
			case LARGE_RHO:
			case LARGE_SIGMA:
			case LARGE_TAU:
			case SMALL_ALPHA:
			case SMALL_EPSILON:
			case SMALL_ETA:
			case SMALL_IOTA:
			case SMALL_OMICRON:
			case SMALL_UPSILON:
			case SMALL_OMEGA:
			case SMALL_BETA:
			case SMALL_GAMMA:
			case SMALL_DELTA:
			case SMALL_ZETA:
			case SMALL_KAPPA:
			case SMALL_LAMBDA:
			case SMALL_MU:
			case SMALL_NU:
			case SMALL_XI:
			case SMALL_PI:
			case SMALL_RHO:
			case SMALL_SIGMA:
			case SMALL_TAU:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26;
				alphabet();
				}
				break;
			case COMMA:
			case SEMICORON:
			case PERIOD:
			case QUESTION:
			case APOSTROPH:
			case LGUILLEMET:
			case RGUILLEMET:
			case EMDASH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 27;
				punctuation();
				}
				break;
			case SPACE:
			case NEWLINE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 28;
				whitespace();
				}
				break;
			case ANYCHAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 29;
				otherwise();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlphabetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonFinalSigmaContext nonFinalSigma() {
			return GetRuleContext<NonFinalSigmaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LargeNasableGammaContext largeNasableGamma() {
			return GetRuleContext<LargeNasableGammaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SmallNasableGammaContext smallNasableGamma() {
			return GetRuleContext<SmallNasableGammaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleAlphabetContext singleAlphabet() {
			return GetRuleContext<SingleAlphabetContext>(0);
		}
		public AlphabetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alphabet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlphabet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlphabetContext alphabet() {
		AlphabetContext _localctx = new AlphabetContext(Context, State);
		EnterRule(_localctx, 4, RULE_alphabet);
		try {
			State = 36;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32;
				nonFinalSigma();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33;
				largeNasableGamma();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 34;
				smallNasableGamma();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 35;
				singleAlphabet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LargeNasableGammaContext : ParserRuleContext {
		public LargeNasableGammaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_largeNasableGamma; } }
	 
		public LargeNasableGammaContext() { }
		public virtual void CopyFrom(LargeNasableGammaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LargeNasableGammaKappaContext : LargeNasableGammaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_NU() { return GetToken(ConversionGrammarParser.LARGE_NU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_KAPPA() { return GetToken(ConversionGrammarParser.LARGE_KAPPA, 0); }
		public LargeNasableGammaKappaContext(LargeNasableGammaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeNasableGammaKappa(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeNasableGammaXiContext : LargeNasableGammaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_NU() { return GetToken(ConversionGrammarParser.LARGE_NU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_XI() { return GetToken(ConversionGrammarParser.LARGE_XI, 0); }
		public LargeNasableGammaXiContext(LargeNasableGammaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeNasableGammaXi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeNasableGammaGammaContext : LargeNasableGammaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_NU() { return GetToken(ConversionGrammarParser.LARGE_NU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_GAMMA() { return GetToken(ConversionGrammarParser.LARGE_GAMMA, 0); }
		public LargeNasableGammaGammaContext(LargeNasableGammaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeNasableGammaGamma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LargeNasableGammaContext largeNasableGamma() {
		LargeNasableGammaContext _localctx = new LargeNasableGammaContext(Context, State);
		EnterRule(_localctx, 6, RULE_largeNasableGamma);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new LargeNasableGammaGammaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				Match(LARGE_NU);
				State = 39;
				Match(LARGE_GAMMA);
				}
				break;
			case 2:
				_localctx = new LargeNasableGammaKappaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 40;
				Match(LARGE_NU);
				State = 41;
				Match(LARGE_KAPPA);
				}
				break;
			case 3:
				_localctx = new LargeNasableGammaXiContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 42;
				Match(LARGE_NU);
				State = 43;
				Match(LARGE_XI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SmallNasableGammaContext : ParserRuleContext {
		public SmallNasableGammaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_smallNasableGamma; } }
	 
		public SmallNasableGammaContext() { }
		public virtual void CopyFrom(SmallNasableGammaContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SmallNasableGammaGammaContext : SmallNasableGammaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_NU() { return GetToken(ConversionGrammarParser.SMALL_NU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_GAMMA() { return GetToken(ConversionGrammarParser.SMALL_GAMMA, 0); }
		public SmallNasableGammaGammaContext(SmallNasableGammaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallNasableGammaGamma(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallNasableGammaXiContext : SmallNasableGammaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_NU() { return GetToken(ConversionGrammarParser.SMALL_NU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_XI() { return GetToken(ConversionGrammarParser.SMALL_XI, 0); }
		public SmallNasableGammaXiContext(SmallNasableGammaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallNasableGammaXi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallNasableGammaKappaContext : SmallNasableGammaContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_NU() { return GetToken(ConversionGrammarParser.SMALL_NU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_KAPPA() { return GetToken(ConversionGrammarParser.SMALL_KAPPA, 0); }
		public SmallNasableGammaKappaContext(SmallNasableGammaContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallNasableGammaKappa(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SmallNasableGammaContext smallNasableGamma() {
		SmallNasableGammaContext _localctx = new SmallNasableGammaContext(Context, State);
		EnterRule(_localctx, 8, RULE_smallNasableGamma);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new SmallNasableGammaGammaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 46;
				Match(SMALL_NU);
				State = 47;
				Match(SMALL_GAMMA);
				}
				break;
			case 2:
				_localctx = new SmallNasableGammaKappaContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				Match(SMALL_NU);
				State = 49;
				Match(SMALL_KAPPA);
				}
				break;
			case 3:
				_localctx = new SmallNasableGammaXiContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				Match(SMALL_NU);
				State = 51;
				Match(SMALL_XI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonFinalSigmaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_SIGMA() { return GetToken(ConversionGrammarParser.SMALL_SIGMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlphabetContext alphabet() {
			return GetRuleContext<AlphabetContext>(0);
		}
		public NonFinalSigmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonFinalSigma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonFinalSigma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonFinalSigmaContext nonFinalSigma() {
		NonFinalSigmaContext _localctx = new NonFinalSigmaContext(Context, State);
		EnterRule(_localctx, 10, RULE_nonFinalSigma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(SMALL_SIGMA);
			State = 55;
			alphabet();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleAlphabetContext : ParserRuleContext {
		public SingleAlphabetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleAlphabet; } }
	 
		public SingleAlphabetContext() { }
		public virtual void CopyFrom(SingleAlphabetContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SmallIotaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_IOTA() { return GetToken(ConversionGrammarParser.SMALL_IOTA, 0); }
		public SmallIotaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallIota(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeIotaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_IOTA() { return GetToken(ConversionGrammarParser.LARGE_IOTA, 0); }
		public LargeIotaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeIota(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallUpsilonContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_UPSILON() { return GetToken(ConversionGrammarParser.SMALL_UPSILON, 0); }
		public SmallUpsilonContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallUpsilon(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeZetaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_ZETA() { return GetToken(ConversionGrammarParser.LARGE_ZETA, 0); }
		public LargeZetaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeZeta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeSigmaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_SIGMA() { return GetToken(ConversionGrammarParser.LARGE_SIGMA, 0); }
		public LargeSigmaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeSigma(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeEtaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_ETA() { return GetToken(ConversionGrammarParser.LARGE_ETA, 0); }
		public LargeEtaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeEta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargePiContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_PI() { return GetToken(ConversionGrammarParser.LARGE_PI, 0); }
		public LargePiContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargePi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeOmegaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_OMEGA() { return GetToken(ConversionGrammarParser.LARGE_OMEGA, 0); }
		public LargeOmegaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeOmega(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeXiContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_XI() { return GetToken(ConversionGrammarParser.LARGE_XI, 0); }
		public LargeXiContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeXi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeAlphaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_ALPHA() { return GetToken(ConversionGrammarParser.LARGE_ALPHA, 0); }
		public LargeAlphaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeAlpha(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeLambdaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_LAMBDA() { return GetToken(ConversionGrammarParser.LARGE_LAMBDA, 0); }
		public LargeLambdaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeLambda(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallEtaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_ETA() { return GetToken(ConversionGrammarParser.SMALL_ETA, 0); }
		public SmallEtaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallEta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallGammaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_GAMMA() { return GetToken(ConversionGrammarParser.SMALL_GAMMA, 0); }
		public SmallGammaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallGamma(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallPiContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_PI() { return GetToken(ConversionGrammarParser.SMALL_PI, 0); }
		public SmallPiContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallPi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallNuContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_NU() { return GetToken(ConversionGrammarParser.SMALL_NU, 0); }
		public SmallNuContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallNu(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeMuContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_MU() { return GetToken(ConversionGrammarParser.LARGE_MU, 0); }
		public LargeMuContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeMu(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeRhoContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_RHO() { return GetToken(ConversionGrammarParser.LARGE_RHO, 0); }
		public LargeRhoContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeRho(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallBetaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_BETA() { return GetToken(ConversionGrammarParser.SMALL_BETA, 0); }
		public SmallBetaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallBeta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeBetaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_BETA() { return GetToken(ConversionGrammarParser.LARGE_BETA, 0); }
		public LargeBetaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeBeta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeDeltaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_DELTA() { return GetToken(ConversionGrammarParser.LARGE_DELTA, 0); }
		public LargeDeltaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeDelta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallLambdaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_LAMBDA() { return GetToken(ConversionGrammarParser.SMALL_LAMBDA, 0); }
		public SmallLambdaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallLambda(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeKappaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_KAPPA() { return GetToken(ConversionGrammarParser.LARGE_KAPPA, 0); }
		public LargeKappaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeKappa(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallKappaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_KAPPA() { return GetToken(ConversionGrammarParser.SMALL_KAPPA, 0); }
		public SmallKappaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallKappa(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallRhoContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_RHO() { return GetToken(ConversionGrammarParser.SMALL_RHO, 0); }
		public SmallRhoContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallRho(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeGammaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_GAMMA() { return GetToken(ConversionGrammarParser.LARGE_GAMMA, 0); }
		public LargeGammaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeGamma(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeOmicronContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_OMICRON() { return GetToken(ConversionGrammarParser.LARGE_OMICRON, 0); }
		public LargeOmicronContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeOmicron(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallXiContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_XI() { return GetToken(ConversionGrammarParser.SMALL_XI, 0); }
		public SmallXiContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallXi(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeEpsilonContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_EPSILON() { return GetToken(ConversionGrammarParser.LARGE_EPSILON, 0); }
		public LargeEpsilonContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeEpsilon(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallAlphaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_ALPHA() { return GetToken(ConversionGrammarParser.SMALL_ALPHA, 0); }
		public SmallAlphaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallAlpha(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallOmegaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_OMEGA() { return GetToken(ConversionGrammarParser.SMALL_OMEGA, 0); }
		public SmallOmegaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallOmega(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallEpsilonContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_EPSILON() { return GetToken(ConversionGrammarParser.SMALL_EPSILON, 0); }
		public SmallEpsilonContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallEpsilon(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeTauContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_TAU() { return GetToken(ConversionGrammarParser.LARGE_TAU, 0); }
		public LargeTauContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeTau(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallOmicronContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_OMICRON() { return GetToken(ConversionGrammarParser.SMALL_OMICRON, 0); }
		public SmallOmicronContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallOmicron(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallMuContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_MU() { return GetToken(ConversionGrammarParser.SMALL_MU, 0); }
		public SmallMuContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallMu(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallTauContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_TAU() { return GetToken(ConversionGrammarParser.SMALL_TAU, 0); }
		public SmallTauContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallTau(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeUpsilonContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_UPSILON() { return GetToken(ConversionGrammarParser.LARGE_UPSILON, 0); }
		public LargeUpsilonContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeUpsilon(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallDeltaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_DELTA() { return GetToken(ConversionGrammarParser.SMALL_DELTA, 0); }
		public SmallDeltaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallDelta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallSigmaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_SIGMA() { return GetToken(ConversionGrammarParser.SMALL_SIGMA, 0); }
		public SmallSigmaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallSigma(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SmallZetaContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALL_ZETA() { return GetToken(ConversionGrammarParser.SMALL_ZETA, 0); }
		public SmallZetaContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSmallZeta(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LargeNuContext : SingleAlphabetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LARGE_NU() { return GetToken(ConversionGrammarParser.LARGE_NU, 0); }
		public LargeNuContext(SingleAlphabetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLargeNu(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleAlphabetContext singleAlphabet() {
		SingleAlphabetContext _localctx = new SingleAlphabetContext(Context, State);
		EnterRule(_localctx, 12, RULE_singleAlphabet);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LARGE_ALPHA:
				_localctx = new LargeAlphaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				Match(LARGE_ALPHA);
				}
				break;
			case LARGE_EPSILON:
				_localctx = new LargeEpsilonContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 58;
				Match(LARGE_EPSILON);
				}
				break;
			case LARGE_ETA:
				_localctx = new LargeEtaContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 59;
				Match(LARGE_ETA);
				}
				break;
			case LARGE_IOTA:
				_localctx = new LargeIotaContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 60;
				Match(LARGE_IOTA);
				}
				break;
			case LARGE_OMICRON:
				_localctx = new LargeOmicronContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 61;
				Match(LARGE_OMICRON);
				}
				break;
			case LARGE_UPSILON:
				_localctx = new LargeUpsilonContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 62;
				Match(LARGE_UPSILON);
				}
				break;
			case LARGE_OMEGA:
				_localctx = new LargeOmegaContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 63;
				Match(LARGE_OMEGA);
				}
				break;
			case LARGE_BETA:
				_localctx = new LargeBetaContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 64;
				Match(LARGE_BETA);
				}
				break;
			case LARGE_GAMMA:
				_localctx = new LargeGammaContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 65;
				Match(LARGE_GAMMA);
				}
				break;
			case LARGE_DELTA:
				_localctx = new LargeDeltaContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 66;
				Match(LARGE_DELTA);
				}
				break;
			case LARGE_ZETA:
				_localctx = new LargeZetaContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 67;
				Match(LARGE_ZETA);
				}
				break;
			case LARGE_KAPPA:
				_localctx = new LargeKappaContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 68;
				Match(LARGE_KAPPA);
				}
				break;
			case LARGE_LAMBDA:
				_localctx = new LargeLambdaContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 69;
				Match(LARGE_LAMBDA);
				}
				break;
			case LARGE_MU:
				_localctx = new LargeMuContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 70;
				Match(LARGE_MU);
				}
				break;
			case LARGE_NU:
				_localctx = new LargeNuContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 71;
				Match(LARGE_NU);
				}
				break;
			case LARGE_XI:
				_localctx = new LargeXiContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 72;
				Match(LARGE_XI);
				}
				break;
			case LARGE_PI:
				_localctx = new LargePiContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 73;
				Match(LARGE_PI);
				}
				break;
			case LARGE_RHO:
				_localctx = new LargeRhoContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 74;
				Match(LARGE_RHO);
				}
				break;
			case LARGE_SIGMA:
				_localctx = new LargeSigmaContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 75;
				Match(LARGE_SIGMA);
				}
				break;
			case LARGE_TAU:
				_localctx = new LargeTauContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 76;
				Match(LARGE_TAU);
				}
				break;
			case SMALL_ALPHA:
				_localctx = new SmallAlphaContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 77;
				Match(SMALL_ALPHA);
				}
				break;
			case SMALL_EPSILON:
				_localctx = new SmallEpsilonContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 78;
				Match(SMALL_EPSILON);
				}
				break;
			case SMALL_ETA:
				_localctx = new SmallEtaContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 79;
				Match(SMALL_ETA);
				}
				break;
			case SMALL_IOTA:
				_localctx = new SmallIotaContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 80;
				Match(SMALL_IOTA);
				}
				break;
			case SMALL_OMICRON:
				_localctx = new SmallOmicronContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 81;
				Match(SMALL_OMICRON);
				}
				break;
			case SMALL_UPSILON:
				_localctx = new SmallUpsilonContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 82;
				Match(SMALL_UPSILON);
				}
				break;
			case SMALL_OMEGA:
				_localctx = new SmallOmegaContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 83;
				Match(SMALL_OMEGA);
				}
				break;
			case SMALL_BETA:
				_localctx = new SmallBetaContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 84;
				Match(SMALL_BETA);
				}
				break;
			case SMALL_GAMMA:
				_localctx = new SmallGammaContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 85;
				Match(SMALL_GAMMA);
				}
				break;
			case SMALL_DELTA:
				_localctx = new SmallDeltaContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 86;
				Match(SMALL_DELTA);
				}
				break;
			case SMALL_ZETA:
				_localctx = new SmallZetaContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 87;
				Match(SMALL_ZETA);
				}
				break;
			case SMALL_KAPPA:
				_localctx = new SmallKappaContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 88;
				Match(SMALL_KAPPA);
				}
				break;
			case SMALL_LAMBDA:
				_localctx = new SmallLambdaContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 89;
				Match(SMALL_LAMBDA);
				}
				break;
			case SMALL_MU:
				_localctx = new SmallMuContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 90;
				Match(SMALL_MU);
				}
				break;
			case SMALL_NU:
				_localctx = new SmallNuContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 91;
				Match(SMALL_NU);
				}
				break;
			case SMALL_XI:
				_localctx = new SmallXiContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 92;
				Match(SMALL_XI);
				}
				break;
			case SMALL_PI:
				_localctx = new SmallPiContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 93;
				Match(SMALL_PI);
				}
				break;
			case SMALL_RHO:
				_localctx = new SmallRhoContext(_localctx);
				EnterOuterAlt(_localctx, 38);
				{
				State = 94;
				Match(SMALL_RHO);
				}
				break;
			case SMALL_SIGMA:
				_localctx = new SmallSigmaContext(_localctx);
				EnterOuterAlt(_localctx, 39);
				{
				State = 95;
				Match(SMALL_SIGMA);
				}
				break;
			case SMALL_TAU:
				_localctx = new SmallTauContext(_localctx);
				EnterOuterAlt(_localctx, 40);
				{
				State = 96;
				Match(SMALL_TAU);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PunctuationContext : ParserRuleContext {
		public PunctuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_punctuation; } }
	 
		public PunctuationContext() { }
		public virtual void CopyFrom(PunctuationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RguillemetContext : PunctuationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RGUILLEMET() { return GetToken(ConversionGrammarParser.RGUILLEMET, 0); }
		public RguillemetContext(PunctuationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRguillemet(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommaContext : PunctuationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ConversionGrammarParser.COMMA, 0); }
		public CommaContext(PunctuationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComma(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PeriodContext : PunctuationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(ConversionGrammarParser.PERIOD, 0); }
		public PeriodContext(PunctuationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmdashContext : PunctuationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMDASH() { return GetToken(ConversionGrammarParser.EMDASH, 0); }
		public EmdashContext(PunctuationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmdash(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QuestionContext : PunctuationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(ConversionGrammarParser.QUESTION, 0); }
		public QuestionContext(PunctuationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SemicoronContext : PunctuationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICORON() { return GetToken(ConversionGrammarParser.SEMICORON, 0); }
		public SemicoronContext(PunctuationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemicoron(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ApostrophContext : PunctuationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APOSTROPH() { return GetToken(ConversionGrammarParser.APOSTROPH, 0); }
		public ApostrophContext(PunctuationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApostroph(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LguillemetContext : PunctuationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LGUILLEMET() { return GetToken(ConversionGrammarParser.LGUILLEMET, 0); }
		public LguillemetContext(PunctuationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLguillemet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PunctuationContext punctuation() {
		PunctuationContext _localctx = new PunctuationContext(Context, State);
		EnterRule(_localctx, 14, RULE_punctuation);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA:
				_localctx = new CommaContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 99;
				Match(COMMA);
				}
				break;
			case SEMICORON:
				_localctx = new SemicoronContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 100;
				Match(SEMICORON);
				}
				break;
			case PERIOD:
				_localctx = new PeriodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 101;
				Match(PERIOD);
				}
				break;
			case QUESTION:
				_localctx = new QuestionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 102;
				Match(QUESTION);
				}
				break;
			case APOSTROPH:
				_localctx = new ApostrophContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 103;
				Match(APOSTROPH);
				}
				break;
			case LGUILLEMET:
				_localctx = new LguillemetContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 104;
				Match(LGUILLEMET);
				}
				break;
			case RGUILLEMET:
				_localctx = new RguillemetContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 105;
				Match(RGUILLEMET);
				}
				break;
			case EMDASH:
				_localctx = new EmdashContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 106;
				Match(EMDASH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhitespaceContext : ParserRuleContext {
		public WhitespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whitespace; } }
	 
		public WhitespaceContext() { }
		public virtual void CopyFrom(WhitespaceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewlineContext : WhitespaceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(ConversionGrammarParser.NEWLINE, 0); }
		public NewlineContext(WhitespaceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpaceContext : WhitespaceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(ConversionGrammarParser.SPACE, 0); }
		public SpaceContext(WhitespaceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhitespaceContext whitespace() {
		WhitespaceContext _localctx = new WhitespaceContext(Context, State);
		EnterRule(_localctx, 16, RULE_whitespace);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SPACE:
				_localctx = new SpaceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				Match(SPACE);
				}
				break;
			case NEWLINE:
				_localctx = new NewlineContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				Match(NEWLINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherwiseContext : ParserRuleContext {
		public OtherwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherwise; } }
	 
		public OtherwiseContext() { }
		public virtual void CopyFrom(OtherwiseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnycharContext : OtherwiseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANYCHAR() { return GetToken(ConversionGrammarParser.ANYCHAR, 0); }
		public AnycharContext(OtherwiseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IConversionGrammarVisitor<TResult> typedVisitor = visitor as IConversionGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnychar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherwiseContext otherwise() {
		OtherwiseContext _localctx = new OtherwiseContext(Context, State);
		EnterRule(_localctx, 18, RULE_otherwise);
		try {
			_localctx = new AnycharContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(ANYCHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x35', 'v', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\a', '\x2', '\x18', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x1B', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '!', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\'', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '/', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x37', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x64', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'n', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'r', '\n', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x2', '\x2', '\f', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x2', '\x2', '\x2', 
		'\xA5', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x4', ' ', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '&', '\x3', '\x2', '\x2', '\x2', '\b', '.', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x38', '\x3', '\x2', '\x2', '\x2', '\xE', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'm', '\x3', '\x2', '\x2', '\x2', '\x12', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 's', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x18', '\x5', '\x4', '\x3', '\x2', '\x17', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '!', '\x5', '\x6', '\x4', '\x2', '\x1D', '!', '\x5', '\x10', 
		'\t', '\x2', '\x1E', '!', '\x5', '\x12', '\n', '\x2', '\x1F', '!', '\x5', 
		'\x14', '\v', '\x2', ' ', '\x1C', '\x3', '\x2', '\x2', '\x2', ' ', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\'', '\x5', '\f', '\a', '\x2', '#', '\'', '\x5', '\b', '\x5', '\x2', 
		'$', '\'', '\x5', '\n', '\x6', '\x2', '%', '\'', '\x5', '\xE', '\b', '\x2', 
		'&', '\"', '\x3', '\x2', '\x2', '\x2', '&', '#', '\x3', '\x2', '\x2', 
		'\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '&', '%', '\x3', '\x2', '\x2', 
		'\x2', '\'', '\a', '\x3', '\x2', '\x2', '\x2', '(', ')', '\a', '\x11', 
		'\x2', '\x2', ')', '/', '\a', '\v', '\x2', '\x2', '*', '+', '\a', '\x11', 
		'\x2', '\x2', '+', '/', '\a', '\xE', '\x2', '\x2', ',', '-', '\a', '\x11', 
		'\x2', '\x2', '-', '/', '\a', '\x12', '\x2', '\x2', '.', '(', '\x3', '\x2', 
		'\x2', '\x2', '.', '*', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', 
		'\x2', '\x2', '/', '\t', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', 
		'%', '\x2', '\x2', '\x31', '\x37', '\a', '\x1F', '\x2', '\x2', '\x32', 
		'\x33', '\a', '%', '\x2', '\x2', '\x33', '\x37', '\a', '\"', '\x2', '\x2', 
		'\x34', '\x35', '\a', '%', '\x2', '\x2', '\x35', '\x37', '\a', '&', '\x2', 
		'\x2', '\x36', '\x30', '\x3', '\x2', '\x2', '\x2', '\x36', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', ')', '\x2', '\x2', 
		'\x39', ':', '\x5', '\x6', '\x4', '\x2', ':', '\r', '\x3', '\x2', '\x2', 
		'\x2', ';', '\x64', '\a', '\x3', '\x2', '\x2', '<', '\x64', '\a', '\x4', 
		'\x2', '\x2', '=', '\x64', '\a', '\x5', '\x2', '\x2', '>', '\x64', '\a', 
		'\x6', '\x2', '\x2', '?', '\x64', '\a', '\a', '\x2', '\x2', '@', '\x64', 
		'\a', '\b', '\x2', '\x2', '\x41', '\x64', '\a', '\t', '\x2', '\x2', '\x42', 
		'\x64', '\a', '\n', '\x2', '\x2', '\x43', '\x64', '\a', '\v', '\x2', '\x2', 
		'\x44', '\x64', '\a', '\f', '\x2', '\x2', '\x45', '\x64', '\a', '\r', 
		'\x2', '\x2', '\x46', '\x64', '\a', '\xE', '\x2', '\x2', 'G', '\x64', 
		'\a', '\xF', '\x2', '\x2', 'H', '\x64', '\a', '\x10', '\x2', '\x2', 'I', 
		'\x64', '\a', '\x11', '\x2', '\x2', 'J', '\x64', '\a', '\x12', '\x2', 
		'\x2', 'K', '\x64', '\a', '\x13', '\x2', '\x2', 'L', '\x64', '\a', '\x14', 
		'\x2', '\x2', 'M', '\x64', '\a', '\x15', '\x2', '\x2', 'N', '\x64', '\a', 
		'\x16', '\x2', '\x2', 'O', '\x64', '\a', '\x17', '\x2', '\x2', 'P', '\x64', 
		'\a', '\x18', '\x2', '\x2', 'Q', '\x64', '\a', '\x19', '\x2', '\x2', 'R', 
		'\x64', '\a', '\x1A', '\x2', '\x2', 'S', '\x64', '\a', '\x1B', '\x2', 
		'\x2', 'T', '\x64', '\a', '\x1C', '\x2', '\x2', 'U', '\x64', '\a', '\x1D', 
		'\x2', '\x2', 'V', '\x64', '\a', '\x1E', '\x2', '\x2', 'W', '\x64', '\a', 
		'\x1F', '\x2', '\x2', 'X', '\x64', '\a', ' ', '\x2', '\x2', 'Y', '\x64', 
		'\a', '!', '\x2', '\x2', 'Z', '\x64', '\a', '\"', '\x2', '\x2', '[', '\x64', 
		'\a', '#', '\x2', '\x2', '\\', '\x64', '\a', '$', '\x2', '\x2', ']', '\x64', 
		'\a', '%', '\x2', '\x2', '^', '\x64', '\a', '&', '\x2', '\x2', '_', '\x64', 
		'\a', '\'', '\x2', '\x2', '`', '\x64', '\a', '(', '\x2', '\x2', '\x61', 
		'\x64', '\a', ')', '\x2', '\x2', '\x62', '\x64', '\a', '*', '\x2', '\x2', 
		'\x63', ';', '\x3', '\x2', '\x2', '\x2', '\x63', '<', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '=', '\x3', '\x2', '\x2', '\x2', '\x63', '>', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '?', '\x3', '\x2', '\x2', '\x2', '\x63', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x41', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x63', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x44', '\x3', '\x2', '\x2', '\x2', '\x63', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x46', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'G', '\x3', '\x2', '\x2', '\x2', '\x63', 'H', '\x3', '\x2', '\x2', '\x2', 
		'\x63', 'I', '\x3', '\x2', '\x2', '\x2', '\x63', 'J', '\x3', '\x2', '\x2', 
		'\x2', '\x63', 'K', '\x3', '\x2', '\x2', '\x2', '\x63', 'L', '\x3', '\x2', 
		'\x2', '\x2', '\x63', 'M', '\x3', '\x2', '\x2', '\x2', '\x63', 'N', '\x3', 
		'\x2', '\x2', '\x2', '\x63', 'O', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'P', '\x3', '\x2', '\x2', '\x2', '\x63', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x63', 'R', '\x3', '\x2', '\x2', '\x2', '\x63', 'S', '\x3', '\x2', '\x2', 
		'\x2', '\x63', 'T', '\x3', '\x2', '\x2', '\x2', '\x63', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x63', 'V', '\x3', '\x2', '\x2', '\x2', '\x63', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\x63', 'X', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x63', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '[', '\x3', '\x2', '\x2', '\x2', '\x63', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\x63', ']', '\x3', '\x2', '\x2', '\x2', '\x63', '^', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '_', '\x3', '\x2', '\x2', '\x2', '\x63', '`', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x65', 'n', '\a', '+', '\x2', '\x2', '\x66', 'n', '\a', ',', '\x2', 
		'\x2', 'g', 'n', '\a', '-', '\x2', '\x2', 'h', 'n', '\a', '.', '\x2', 
		'\x2', 'i', 'n', '\a', '/', '\x2', '\x2', 'j', 'n', '\a', '\x30', '\x2', 
		'\x2', 'k', 'n', '\a', '\x31', '\x2', '\x2', 'l', 'n', '\a', '\x32', '\x2', 
		'\x2', 'm', '\x65', '\x3', '\x2', '\x2', '\x2', 'm', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'g', '\x3', '\x2', '\x2', '\x2', 'm', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'i', '\x3', '\x2', '\x2', '\x2', 'm', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x11', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\a', 
		'\x33', '\x2', '\x2', 'p', 'r', '\a', '\x34', '\x2', '\x2', 'q', 'o', 
		'\x3', '\x2', '\x2', '\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 
		'\x13', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', '\x35', '\x2', '\x2', 
		't', '\x15', '\x3', '\x2', '\x2', '\x2', '\n', '\x19', ' ', '&', '.', 
		'\x36', '\x63', 'm', 'q',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace CshPlgr.Lib.Converter.Generated
