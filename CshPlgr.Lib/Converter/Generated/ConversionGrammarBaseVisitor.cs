//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ConversionGrammar.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CshPlgr.Lib.Converter.Generated {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IConversionGrammarVisitor{Result}"/>,
/// which can be extended to create a visitor which only needs to handle a subset
/// of the available methods.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class ConversionGrammarBaseVisitor<Result> : AbstractParseTreeVisitor<Result>, IConversionGrammarVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="ConversionGrammarParser.letters"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLetters([NotNull] ConversionGrammarParser.LettersContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="ConversionGrammarParser.letter"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLetter([NotNull] ConversionGrammarParser.LetterContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="ConversionGrammarParser.alphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitAlphabet([NotNull] ConversionGrammarParser.AlphabetContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeNasableGammaGamma</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.largeNasableGamma"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeNasableGammaGamma([NotNull] ConversionGrammarParser.LargeNasableGammaGammaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeNasableGammaKappa</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.largeNasableGamma"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeNasableGammaKappa([NotNull] ConversionGrammarParser.LargeNasableGammaKappaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeNasableGammaXi</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.largeNasableGamma"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeNasableGammaXi([NotNull] ConversionGrammarParser.LargeNasableGammaXiContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallNasableGammaGamma</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.smallNasableGamma"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallNasableGammaGamma([NotNull] ConversionGrammarParser.SmallNasableGammaGammaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallNasableGammaKappa</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.smallNasableGamma"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallNasableGammaKappa([NotNull] ConversionGrammarParser.SmallNasableGammaKappaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallNasableGammaXi</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.smallNasableGamma"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallNasableGammaXi([NotNull] ConversionGrammarParser.SmallNasableGammaXiContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by <see cref="ConversionGrammarParser.nonFinalSigma"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNonFinalSigma([NotNull] ConversionGrammarParser.NonFinalSigmaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeAlpha</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeAlpha([NotNull] ConversionGrammarParser.LargeAlphaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeEpsilon</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeEpsilon([NotNull] ConversionGrammarParser.LargeEpsilonContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeEta</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeEta([NotNull] ConversionGrammarParser.LargeEtaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeIota</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeIota([NotNull] ConversionGrammarParser.LargeIotaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeOmicron</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeOmicron([NotNull] ConversionGrammarParser.LargeOmicronContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeUpsilon</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeUpsilon([NotNull] ConversionGrammarParser.LargeUpsilonContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeOmega</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeOmega([NotNull] ConversionGrammarParser.LargeOmegaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeBeta</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeBeta([NotNull] ConversionGrammarParser.LargeBetaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeGamma</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeGamma([NotNull] ConversionGrammarParser.LargeGammaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeDelta</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeDelta([NotNull] ConversionGrammarParser.LargeDeltaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeZeta</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeZeta([NotNull] ConversionGrammarParser.LargeZetaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeKappa</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeKappa([NotNull] ConversionGrammarParser.LargeKappaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeLambda</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeLambda([NotNull] ConversionGrammarParser.LargeLambdaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeMu</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeMu([NotNull] ConversionGrammarParser.LargeMuContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeNu</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeNu([NotNull] ConversionGrammarParser.LargeNuContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeXi</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeXi([NotNull] ConversionGrammarParser.LargeXiContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largePi</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargePi([NotNull] ConversionGrammarParser.LargePiContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeRho</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeRho([NotNull] ConversionGrammarParser.LargeRhoContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeSigma</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeSigma([NotNull] ConversionGrammarParser.LargeSigmaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>largeTau</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLargeTau([NotNull] ConversionGrammarParser.LargeTauContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallAlpha</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallAlpha([NotNull] ConversionGrammarParser.SmallAlphaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallEpsilon</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallEpsilon([NotNull] ConversionGrammarParser.SmallEpsilonContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallEta</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallEta([NotNull] ConversionGrammarParser.SmallEtaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallIota</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallIota([NotNull] ConversionGrammarParser.SmallIotaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallOmicron</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallOmicron([NotNull] ConversionGrammarParser.SmallOmicronContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallUpsilon</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallUpsilon([NotNull] ConversionGrammarParser.SmallUpsilonContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallOmega</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallOmega([NotNull] ConversionGrammarParser.SmallOmegaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallBeta</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallBeta([NotNull] ConversionGrammarParser.SmallBetaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallGamma</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallGamma([NotNull] ConversionGrammarParser.SmallGammaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallDelta</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallDelta([NotNull] ConversionGrammarParser.SmallDeltaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallZeta</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallZeta([NotNull] ConversionGrammarParser.SmallZetaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallKappa</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallKappa([NotNull] ConversionGrammarParser.SmallKappaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallLambda</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallLambda([NotNull] ConversionGrammarParser.SmallLambdaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallMu</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallMu([NotNull] ConversionGrammarParser.SmallMuContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallNu</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallNu([NotNull] ConversionGrammarParser.SmallNuContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallXi</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallXi([NotNull] ConversionGrammarParser.SmallXiContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallPi</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallPi([NotNull] ConversionGrammarParser.SmallPiContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallRho</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallRho([NotNull] ConversionGrammarParser.SmallRhoContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallSigma</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallSigma([NotNull] ConversionGrammarParser.SmallSigmaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>smallTau</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.singleAlphabet"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSmallTau([NotNull] ConversionGrammarParser.SmallTauContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>comma</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.punctuation"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitComma([NotNull] ConversionGrammarParser.CommaContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>semicoron</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.punctuation"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSemicoron([NotNull] ConversionGrammarParser.SemicoronContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>period</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.punctuation"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitPeriod([NotNull] ConversionGrammarParser.PeriodContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>question</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.punctuation"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitQuestion([NotNull] ConversionGrammarParser.QuestionContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>apostroph</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.punctuation"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitApostroph([NotNull] ConversionGrammarParser.ApostrophContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>lguillemet</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.punctuation"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitLguillemet([NotNull] ConversionGrammarParser.LguillemetContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>rguillemet</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.punctuation"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitRguillemet([NotNull] ConversionGrammarParser.RguillemetContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>emdash</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.punctuation"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitEmdash([NotNull] ConversionGrammarParser.EmdashContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>space</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.whitespace"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitSpace([NotNull] ConversionGrammarParser.SpaceContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>newline</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.whitespace"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitNewline([NotNull] ConversionGrammarParser.NewlineContext context) { return VisitChildren(context); }
	/// <summary>
	/// Visit a parse tree produced by the <c>anychar</c>
	/// labeled alternative in <see cref="ConversionGrammarParser.otherwise"/>.
	/// <para>
	/// The default implementation returns the result of calling <see cref="AbstractParseTreeVisitor{Result}.VisitChildren(IRuleNode)"/>
	/// on <paramref name="context"/>.
	/// </para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	public virtual Result VisitAnychar([NotNull] ConversionGrammarParser.AnycharContext context) { return VisitChildren(context); }
}
} // namespace CshPlgr.Lib.Converter.Generated
